name: CI/CD Pipeline

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  issue_comment:
    types: [created]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']
        node-version: ['16', '18', '20']
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 pytest
    
    - name: Install Node.js dependencies
      run: npm install
    
    - name: Lint Python code
      run: |
        # Stop build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=.git,__pycache__
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics --exclude=.git,__pycache__
    
    - name: Test Python imports
      run: |
        python -c "import cv2; print('OpenCV version:', cv2.__version__)"
        python -c "import pyvirtualcam; print('pyvirtualcam imported successfully')"
        python -c "import websocket; print('websocket-client imported successfully')"
        python -c "from PIL import Image; print('PIL imported successfully')"
        python -c "import numpy; print('NumPy version:', numpy.__version__)"
    
    - name: Check Node.js modules
      run: |
        node -e "require('express'); console.log('Express loaded');"
        node -e "require('ws'); console.log('WebSocket loaded');"
    
    - name: Validate SSL certificate generation script
      if: runner.os != 'Windows'
      run: |
        which openssl || echo "OpenSSL not found"

  build-release:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Create Release Archive
      run: |
        mkdir -p release
        cp -r *.py *.js *.html *.bat *.sh *.json *.txt README.md LICENSE .gitignore release/
        cd release && zip -r ../mobile-webcam-release.zip . && cd ..
        tar -czf mobile-webcam-release.tar.gz -C release .
    
    - name: Upload Release Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: release-packages
        path: |
          mobile-webcam-release.zip
          mobile-webcam-release.tar.gz